require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vendors", type: :request do

  before(:all) do
    @user = create(:user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Vendor. As you add validations to Vendor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "Vendy Vendor", email: "vendor@test.com"}
  }

  let(:invalid_attributes) {
    {name: "Vendy Vendor", email: ""}
  }

  describe "GET /index" do
    it "renders a successful response when signed in" do
      sign_in @user
      Vendor.create! valid_attributes

      get vendors_url
      expect(response).to be_successful
    end

    it "renders a redirect when not signed in" do
      Vendor.create! valid_attributes

      get vendors_url
      expect(response).to have_http_status(302)
    end
  end

  describe "GET /show" do
    it "renders a redirect when not signed in" do
      vendor = Vendor.create! valid_attributes

      get vendor_url(vendor)
      expect(response).to have_http_status(302)
    end

    it "renders a successful response when signed in" do
      sign_in @user
      vendor = Vendor.create! valid_attributes

      get vendor_url(vendor)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a redirect with no sign in" do
      get new_vendor_url
      expect(response).to have_http_status(302)
    end

    it "renders a successful response when signed in" do
      sign_in @user

      get new_vendor_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a redirect with no sign in" do
      vendor = Vendor.create! valid_attributes
      get edit_vendor_url(vendor)
      expect(response).to have_http_status(302)
    end

    it "renders a successful response when signed in" do
      sign_in @user

      vendor = Vendor.create! valid_attributes
      get edit_vendor_url(vendor)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Vendor when signed in" do
        sign_in @user

        expect {
          post vendors_url, params: { vendor: valid_attributes }
        }.to change(Vendor, :count).by(1)
      end

      it "redirects to the created vendor when signed in" do
        sign_in @user

        post vendors_url, params: { vendor: valid_attributes }
        expect(response).to redirect_to(vendor_url(Vendor.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Vendor" do
        expect {
          post vendors_url, params: { vendor: invalid_attributes }
        }.to change(Vendor, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template) when signed in" do
        sign_in @user

        post vendors_url, params: { vendor: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {email: 'testy_new@test.com', name: "New Vendor Name"}
      }

      it "updates the requested vendor" do
        vendor = Vendor.create! valid_attributes
        patch vendor_url(vendor), params: { vendor: new_attributes }
        vendor.reload
        skip("Add assertions for updated state")
      end

      it "redirects to sign in when not signed in" do
        vendor = Vendor.create! valid_attributes
        patch vendor_url(vendor), params: { vendor: new_attributes }
        vendor.reload
        expect(response).to redirect_to(new_user_session_url)
      end

      it "redirects to the vendor when signed in" do
        sign_in @user
        vendor = Vendor.create! valid_attributes

        patch vendor_url(vendor), params: { vendor: new_attributes }
        vendor.reload
        expect(response).to redirect_to(vendor_url(vendor))
      end
    end

    context "with invalid parameters" do

      it "renders a 302 response (redirect to sign in) when not signed in" do
        vendor = Vendor.create! valid_attributes
        patch vendor_url(vendor), params: { vendor: invalid_attributes }
        expect(response).to redirect_to(new_user_session_url)
      end

    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested vendor when signed in" do
      sign_in @user

      vendor = Vendor.create! valid_attributes
      expect {
        delete vendor_url(vendor)
      }.to change(Vendor, :count).by(-1)
    end

    it "redirects to the vendors list when signed in" do
      sign_in @user

      vendor = Vendor.create! valid_attributes
      delete vendor_url(vendor)
      expect(response).to redirect_to(vendors_url)
    end
  end
end
