require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do

  before(:all) do
    @user = create(:user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Customer. As you add validations to Customer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a redirect with no sign in" do
      product = create(:product)

      get products_url
      expect(response).to have_http_status(302)
    end

    # it "renders a successful response when signed in" do
    #   sign_in @user
    #   customer = create(:customer)

    #   get customers_url
    #   expect(response).to be_successful
    # end
  end

  describe "GET /show" do
    it "renders a redirect with no sign in" do
      product = create(:product)

      get product_url(product)
      expect(response).to have_http_status(302)
    end

    # it "renders a successful response when signed in and customer exists" do
    #   sign_in @user
    #   customer = create(:customer)

    #   get customer_url(customer)
    #   expect(response).to be_successful
    # end

    # it "renders a successful response when signed in and customer exists" do
    #   sign_in @user
    #   # customer = Customer.create! valid_attributes
    #   customer = create(:customer)

    #   get customer_url(customer)
    #   expect(response).to be_successful
    # end
  end

  describe "GET /new" do
    it "renders a redirect with no sign in" do
      get new_product_url
      expect(response).to have_http_status(302)
    end

    it "renders a successful response when signed in" do
      sign_in @user

      get new_product_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    # it "renders a redirect with no sign in" do
    #   customer = create(:customer)

    #   get edit_customer_url(customer)
    #   expect(response).to have_http_status(302)
    # end

    # it "renders a successful response when signed in" do
    #   sign_in @user
    #   customer = create(:customer)

    #   get edit_customer_url(customer)
    #   expect(response).to be_successful
    # end
  end

  describe "POST /create" do
    context "with valid parameters" do
      # it "creates a new Customer when signed in" do
      #   sign_in @user

      #   expect {
      #     post customers_url, params: { customer: valid_attributes }
      #   }.to change(Customer, :count).by(1)
      # end

      # it "redirects to the created customer" do
      #   sign_in @user

      #   post customers_url, params: { customer: valid_attributes }
      #   expect(response).to redirect_to(customer_url(Customer.last))
      # end

      # it "fails to create a new Customer when not signed in" do
      #   expect {
      #     post customers_url, params: { customer: valid_attributes }
      #   }.to change(Customer, :count).by(0)
      # end
    end

    context "with invalid parameters" do
      # it "does not create a new Customer" do
      #   expect {
      #     post customers_url, params: { customer: invalid_attributes }
      #   }.to change(Customer, :count).by(0)
      # end

      # it "renders a response with 422 status (i.e. to display the 'new' template)" do
      #   post customers_url, params: { customer: invalid_attributes }
      #   expect(response).to have_http_status(:unprocessable_entity)
      # end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      # let(:new_attributes) {
      #   {email: 'testy_new@test.com', name: "New Testy McTesterson"}
      # }

      # it "fails to update the requested customer when not signed in" do
      #   customer = Customer.create! valid_attributes
      #   patch customer_url(customer), params: { customer: new_attributes }
      #   customer.reload
      #   skip("Add assertions for failed update state")
      # end

      # it "updates the requested customer" do
      #   customer = Customer.create! valid_attributes
      #   patch customer_url(customer), params: { customer: new_attributes }
      #   customer.reload
      #   skip("Add assertions for updated state")
      # end

      # it "redirects to the customer" do
      #   skip("Add a hash of attributes valid for your model")

      #   customer = Customer.create! valid_attributes
      #   patch customer_url(customer), params: { customer: new_attributes }
      #   customer.reload
      #   expect(response).to redirect_to(customer_url(customer))
      # end
    end

    context "with invalid parameters" do

      # it "renders a response with 422 status (i.e. to display the 'edit' template)" do
      #   skip("Add a hash of attributes valid for your model")

      #   customer = Customer.create! valid_attributes
      #   patch customer_url(customer), params: { customer: invalid_attributes }
      #   expect(response).to have_http_status(:unprocessable_entity)
      # end

    end
  end

  describe "DELETE /destroy" do
    # it "destroys the requested customer when signed in" do
    #   sign_in @user
    #   customer = Customer.create! valid_attributes

    #   expect {
    #     delete customer_url(customer)
    #   }.to change(Customer, :count).by(-1)
    # end

    # it "fails to destroy the requested customer when not signed in" do
    #   customer = Customer.create! valid_attributes

    #   expect {
    #     delete customer_url(customer)
    #   }.to change(Customer, :count).by(0)
    # end

    # it "redirects to the customers list" do
    #   skip("Add a hash of attributes valid for your model")

    #   customer = Customer.create! valid_attributes
    #   delete customer_url(customer)
    #   expect(response).to redirect_to(customers_url)
    # end
  end
end
