A is a buyer of widgets (ie, Airbus buying compute). They want to be sent emissions data in PACT format from their widget suppliers/vendors, like B.

B is a vendor of widgets (or compute, like AWS). They sell to A. They need to be able to enter PCF data into their system, then send it to A, like you wish you could have done with the CCFT.

B creates a Customer object in their system for B (and all of their customers). Creating the customer object creates an API key, which together with the endpoint can be supplied to the actual customer--just like the way you wish you could have given your customers an endpoint.

A creates a Vendor object in their system for B (and all their widget suppliers--like Airbus might have created a Vendor object to receive AWS data). They then add the API endpoint and key supplied to them by B to the Vendor object.

[This demo skips the parts where A sends the API endpoint and key to B. That would probably be in an email. It could mean just sending them the key for their own use. It could also be emailing them a link to set up an account--and then B would get a URL, and actually do the creation of the Vendor account/object themselves, and get the key that way. Either way, they end up with endpoint and key, and A has an entry for them in their system.]

For B to push emissions data to A, they go to their product page for the widget, select A from the dropdown of their Customers, and hit 'send'. That sends the PCF data and the API key to the customer's endpoint.

A's system receives the request. It saves the PCF data, then looks up the vendor object using the API key. It associated the PCF just received with the vendor (B, or AWS), so that when they look at the vendor page in their system, they see all the PCFs they've received.

Next step: you'll want B to have a record of each send event, so some kind of object like PCFSendEvent.





--------------------------

App based on this tutorial:
https://semaphoreci.com/community/tutorials/dockerizing-a-ruby-on-rails-application

TODO:
- rename 'volume' to 'amount'
- add more granular location fields, match pact:
- geographyRegionOrSubregion, geographyCountry, and geographyCountrySubdivision


Scenarios:

- user makes a request for CI of a generic liter of kerosene
- SupNet API returns pact format, sparse data, global average

- user makes a request for CI of a liter of kerosene from a specific region
- SupNet API returns sparse pact format, but higher quality data (regional average)

- user makes a request for CI, and specifies a vendor, who has given them an API key to their SupNet node. SupNet API hites the node's API in the background, get richer and more accurate data.

Emissions factors for kerosene:

EPA:
https://www.eia.gov/environment/emissions/co2_vol_mass.php
70.66 kgCO2 Per Million Btu
70.66 kgCO2 Per 0.29307107 MWh
===> US: 241.10 kgCO2 per MWh

IPCC (world in data):
https://ourworldindata.org/grapher/carbon-dioxide-emissions-factor
===> World, I think?: 249.48 kgCO2 per MWh

conversion:
1000000 btu = 0.29307107 MWh


Notes:

rails generate scaffold jetFuel volume:integer unit:string category:string subcategory:string location:string vendor:string carbon_intensity:decimal produced_at:datetime

rails generate model source product:references node:references

rails generate scaffold node owner:string category:string subcategory:string url:string

# POST /jet_fuel find carbon intensity and create a record of what's getting retunred
Provides inputs to the model's 'create' method, which does the best it can to get carbon data, then persists the request and what it could do, then it returns PACT json (via API), or html (via HTTP)

productCompanyName: Skittles
companyName: Mars

They're actually the same, one the legal name, I think, the other the brand name--like Mars and

The company using this is the

# Need to totally start over?
Stop the container(s) using the following command:
docker-compose down

Delete all containers using the following command:
docker rm -f $(docker ps -a -q)

Delete all volumes using the following command:
docker volume rm $(docker volume ls -q)

curl -v -H 'Content-Type: application/json' -d "@test_pact.json" -X POST http://localhost:3000/products.json
